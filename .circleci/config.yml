version: 2.1


parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"
  sh-token:
    type: string
    default: "b9461c43-6888-4d04-8e76-7beeddbb863c" 

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here 
      workflow-id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
      sh-token:
        type: string
        default: "b9461c43-6888-4d04-8e76-7beeddbb863c" 
      
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            #aws s3 rm --recursive s3://udapeople-<< parameters.id >> --recursive 
            #aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
            #aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
            
            aws s3 rm --recursive s3://udapeople-<< pipeline.parameters.workflow-id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< pipeline.parameters.workflow-id >>"
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< pipeline.parameters.workflow-id >>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      when:
        type: string
      id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: 2f:c4:43:e8:92:55:9e:8a:04:6a:26:b7:3f:ad:a0:0b" --request GET https://api.memstash.io/values/DB_MIGRATION_<< parameters.id >>)
            #SUCCESS = 1
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              pwd
              ls -la
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            sudo npm install webpack-dev-server -g
            sudo npm install
            sudo npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["frontend-build"]
      - run:
          name: Font-end test
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["backend-build"]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["frontend-build"]
      - run:
          name: Font-end security scan
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["backend-build"]
      - run:
          name: Back-end security scan
          command: |
            cd backend
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      #- aws-cli/setup
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>" \
              --tags project=udapeople
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>" \
              --tags project=udapeople
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2f:c4:43:e8:92:55:9e:8a:04:6a:26:b7:3f:ad:a0:0b"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > "backend/.env"

            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"

            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

            ansible-playbook \
              -i .circleci/ansible/inventory.txt \
              .circleci/ansible/configure-server.yml
              
      # Here's where you will add some code to rollback on failure  
      - run:
          name: Install AWS CLI for rollback
          when: on_fail
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - destroy-environment    

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      #- aws-cli/setup

      - run:
          name: Run migrations
          command: |
            echo ENVIRONMENT=production > "backend/.env"

            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"

            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd backend
            sudo npm install
            sudo npm run migrations > migration.log
            cat migration.log
            migration_status=$(cat migration.log | grep -c "has been executed successfully")
            if [ $migration_status > 0 ]; then exit 0; else exit 1; fi;
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" \
              -H "token: << pipeline.parameters.memstash-token >>" \
              --request PUT --data "1" \
              https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
     # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy-environment    

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
          
      - run:
          name: Install dependencies
          command: |
            cd frontend
            sudo npm install webpack-dev-server -g
            sudo npm install
      - run:
          name: Get backend url # command changed
          command: |
            export BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"

            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URL=$API_URL >> "frontend/.env"

            echo $API_URL
            
      - run: # Added
          name: Build frontend
          command: |
            cd frontend
            ls -la
            cat .env
            npm run build
            
      #- aws-cli/setup # Added
      
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp --recursive frontend/dist "s3://udapeople-<< pipeline.parameters.workflow-id >>"
      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy-environment     
                    
  deploy-backend:
    docker:  
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2f:c4:43:e8:92:55:9e:8a:04:6a:26:b7:3f:ad:a0:0b"]
      - attach_workspace:
          at: ~/
          
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh-client tar gzip 
      - run:
          name: Deploy backend
          command: |
            cd /home
            tar czf backend.tar.gz -P /home/circleci/project/backend/di
      # Here's where you will add some code to rollback on failure

      - revert-migrations
      - destroy-environment  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_URL=$(sed -n 2p .circleci/ansible/inventory.txt)
      - run:
          name: Backend smoke test.
          command: |
            if curl -s https://${BACKEND_URL}:3030/api/status
            then
            return 1
            else
            return 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-<< pipeline.parameters.workflow-id >>.s3-website-eu-west-3.amazonaws.com"
            echo $URL

            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi
      # Here's where you will add some code to rollback on failure 
      - revert-migrations
      - destroy-environment  

  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
            apk add --update curl
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "udapeople-cloudfront" \
              --parameter-overrides WorkflowID="<< pipeline.parameters.workflow-id >>" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy-environment

  cleanup:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      #- aws-cli/setup
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(curl -H "token: << pipeline.parameters.sh-token >>" --request GET https://api.memstash.io/values/old_workflow_id_${CIRCLE_WORKFLOW_ID})
            echo "Old Workflow ID: ${OldWorkflowID}"

            if [ "${OldWorkflowID}" != "<< pipeline.parameters.workflow-id >>" ]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
